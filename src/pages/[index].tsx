import Head from 'next/head'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import { getMainNavigationMenu, getPage } from '@/utils/apolloContentfulClient'
import componentMapping from '@/utils/contentfulComponentMapping'
import { ContentfulBase } from '@/interfaces/contentfulBase'
import { documentToReactComponents } from '@contentful/rich-text-react-renderer'
import { options } from '@/utils/richTextParse'

const inter = Inter({ subsets: ['latin'] })

export default function Home(props: any) {
  return (
    <>
      <Head>
        <title>My Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <>
          {props.title && <h1>{props.title}</h1>}
          {props.text &&
            props?.text?.json?.content?.map((item: any) =>
              documentToReactComponents(item, options(props?.text?.links)),
            )}
          {props.blocksCollection.items.length > 0 &&
            props.blocksCollection.items.map((item: ContentfulBase) => {
              const componentName = item?.['__typename']
              const Component = componentMapping[componentName]
              return Component ? (
                <Component key={`${item.sys.id} ${Math.random()}`} {...item} />
              ) : (
                <div key={`${item.sys.id} ${Math.random()}`}>
                  In Progress...
                </div>
              )
            })}
        </>
      </main>
    </>
  )
}

// Use graphql without apollo client
// Please import contentfulClient to use this way
// export async function getServerSideProps() {
//  const blogPosts = await ContentfulApi.getAllContentfulBlogPosts();
//   console.log(blogPosts);
//   return {
//     props: {
//       posts: blogPosts,
//     },
//   };
// }

// export async function getServerSideProps() {
//  const blogPosts = await getAllContentfulBlogPosts()
//   return {
//     props: {
//       posts: blogPosts,
//     },
//   };
// }

export async function getServerSideProps(context: any) {
  const { resolvedUrl } = context
  const page = await getPage(resolvedUrl)
  return {
    props: {
      page: page,
      revalidate: 10,
    },
  }
}
