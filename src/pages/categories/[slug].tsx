import Head from 'next/head'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import { getCategoryPage } from '@/utils/apolloContentfulClient'
import componentMapping from '@/utils/contentfulComponentMapping'
import { ContentfulBase } from '@/interfaces/contentfulBase'
import { documentToReactComponents } from '@contentful/rich-text-react-renderer'
import { options } from '@/utils/richTextParse'
import BlogTiles from '@/components/cms/blogTile/BlogTiles'

const inter = Inter({ subsets: ['latin'] })

export default function CategoryPage(props: any) {
  const { categoryMetaData, relatedPosts } = props
  const placeholder = categoryMetaData.blocksCollection.items.filter(
    (item: any) => item?.['__typename'] === 'Placeholder',
  )
  const showRelatedPostsDefaultPlace = placeholder.length === 0
  return (
    <>
      <Head>
        <title>My Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <>
          {categoryMetaData.title && <h1>{categoryMetaData.title}</h1>}
          {categoryMetaData.text &&
            categoryMetaData?.text?.json?.content?.map((item: any) =>
              documentToReactComponents(
                item,
                options(categoryMetaData?.text?.links),
              ),
            )}
          {showRelatedPostsDefaultPlace &&
            relatedPosts &&
            relatedPosts.length > 0 && (
              <BlogTiles
                title={'All Related'}
                blogItemsCollection={{ items: [...relatedPosts] }}
              />
            )}
          {categoryMetaData.blocksCollection.items.length > 0 &&
            categoryMetaData.blocksCollection.items.map(
              (item: ContentfulBase) => {
                const componentName = item?.['__typename']
                const Component = componentMapping[componentName]
                console.log(item)
                if (
                  componentName === 'Placeholder' &&
                  relatedPosts &&
                  relatedPosts.length > 0
                ) {
                  return (
                    <>
                      <BlogTiles
                        title={'Posts Related'}
                        blogItemsCollection={{ items: [...relatedPosts] }}
                      />
                    </>
                  )
                }
                return Component ? (
                  <Component
                    key={`${item.sys.id} ${Math.random()}`}
                    {...item}
                  />
                ) : (
                  <div key={`${item.sys.id} ${Math.random()}`}>
                    In Progress...
                  </div>
                )
              },
            )}
        </>
      </main>
    </>
  )
}

export async function getServerSideProps(context: any) {
  const { resolvedUrl } = context
  const page = await getCategoryPage(resolvedUrl)
  return {
    props: {
      page: page,
      revalidate: 10,
    },
  }
}
